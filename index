<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>QFC — Questionário de Falhas Cognitivas</title>
<style>
  :root{
    --bg:#0e1625; --card:#14213b; --line:#2b3f66;
    --text:#f8fafc; --muted:#cbd5e1;
    --pri:#6d28d9; --ok:#10b981; --err:#ef4444; --warn:#f59e0b;
    --chip:#0b1220; --chipHover:#0f1a2e; --chipOn:#1f2a48;
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{
    margin:0;background:var(--bg);color:var(--text);
    font:16px/1.55 system-ui,-apple-system,Segoe UI,Roboto,Ubuntu;
    -webkit-font-smoothing:antialiased; -moz-osx-font-smoothing:grayscale;
  }
  .wrap{max-width:1024px;margin:20px auto;padding:0 16px}
  .card{background:var(--card);border:1px solid var(--line);border-radius:14px;padding:18px}
  h1{margin:0 0 6px;font-size:1.45rem}
  .muted{color:var(--muted)}

  .grid-info{display:grid;grid-template-columns:1fr 1fr;gap:12px;margin:12px 0 6px}
  @media (max-width:720px){.grid-info{grid-template-columns:1fr}}
  .info{background:rgba(0,0,0,.18);border:1px solid var(--line);border-radius:12px;padding:12px}
  .info b{display:block;margin-bottom:4px;color:#e2e8f0}

  /* ===== ITENS ===== */
  .item{display:grid;grid-template-columns:1fr auto;gap:14px;align-items:center;border:1px solid var(--line);border-radius:12px;padding:14px;background:rgba(0,0,0,.18);margin-bottom:12px}
  .stem{font-size:1rem}

  /* escala em chips/botões */
  .scale{display:flex;flex-wrap:wrap;gap:8px;justify-content:flex-end}
  .chip{
    position:relative; display:inline-flex; align-items:center; gap:8px;
    padding:10px 12px; border:1px solid var(--line); border-radius:999px;
    background:var(--chip); cursor:pointer; user-select:none;
    transition:transform .05s ease, border-color .15s ease, background .15s ease
  }
  .chip:hover{border-color:#4f70ff;background:var(--chipHover)}
  .chip input{appearance:none;-webkit-appearance:none; width:0;height:0; position:absolute; opacity:0}
  .chip .lbl{font-size:.93rem}
  .chip .val{opacity:.8; font-size:.85rem}
  .chip input:checked + .lbl{font-weight:700}
  .chip input:checked ~ .val{opacity:1}
  .chip:has(input:checked){background:var(--chipOn); border-color:#7aa2ff}
  .chip:focus-within{outline:2px solid #7aa2ff; outline-offset:2px}

  @media (max-width:640px){
    .item{grid-template-columns:1fr}
    .scale{justify-content:flex-start}
  }

  .legend{display:flex;flex-wrap:wrap;gap:8px;margin:6px 0 12px}
  .pill{display:inline-block;padding:4px 8px;border-radius:999px;border:1px solid var(--line);background:rgba(0,0,0,.25);font-size:.86rem}

  /* Ações */
  .btn{display:inline-flex;align-items:center;gap:10px;background:var(--pri);border:none;color:#fff;padding:12px 16px;border-radius:12px;cursor:pointer;font-weight:600}
  .btn.ok{background:var(--ok)}
  .btn.ghost{background:transparent;border:1px solid var(--line);color:var(--muted)}
  .btn:disabled{opacity:.6;cursor:not-allowed}

  /* Mensagens */
  .msg{margin:12px 0;padding:12px;border-radius:10px}
  .okbox{background:#06351f;border:1px solid #0e6c45;color:#c8ffe3}
  .errbox{background:#3b0d0d;border:1px solid #7f1d1d;color:#ffd5d5}
  .warnbox{background:#3a2903;border:1px solid #885e09;color:#ffe6b0}

  /* Progresso */
  .progress{height:10px;background:rgba(255,255,255,.05);border:1px solid var(--line);border-radius:999px;overflow:hidden}
  .bar{height:100%;width:0%;background:linear-gradient(90deg, #6d28d9, #10b981)}
</style>
</head>
<body>
<div class="wrap">
  <div class="card">
    <h1>QFC — Questionário de Falhas Cognitivas</h1>
    <p class="muted">
      Marque com que frequência **nos últimos 6 meses** cada situação aconteceu com você.
      Escala: <b>Nunca (0)</b>, <b>Raramente (1)</b>, <b>Ocasionalmente (2)</b>, <b>Frequentemente (3)</b>, <b>Quase sempre (4)</b>.
    </p>
    <div class="legend">
      <span class="pill">0 = Nunca</span>
      <span class="pill">1 = Raramente</span>
      <span class="pill">2 = Ocasionalmente</span>
      <span class="pill">3 = Frequentemente</span>
      <span class="pill">4 = Quase sempre</span>
    </div>

    <div id="pacInfo" class="grid-info" style="display:none;"></div>

    <div id="progressWrap" style="display:none; gap:8px; align-items:center; margin:8px 0 0;">
      <div style="display:flex;justify-content:space-between;align-items:center;gap:10px;margin-bottom:6px">
        <span class="muted" id="progressText">Progresso: 0/25</span>
        <button id="clearDraft" class="btn ghost" type="button" title="Limpar rascunho local">Limpar rascunho</button>
      </div>
      <div class="progress"><div class="bar" id="bar"></div></div>
    </div>

    <form id="form" style="margin-top:14px; display:none;" novalidate>
      <div id="qs"></div>
      <div style="margin-top:14px;display:flex;gap:10px;flex-wrap:wrap">
        <button id="btnSubmit" class="btn ok" type="submit">Enviar respostas</button>
        <button id="btnSave" class="btn ghost" type="button" title="Salvar rascunho">Salvar rascunho</button>
      </div>
      <div id="msg" class="msg" style="display:none" role="alert" aria-live="polite"></div>
    </form>

    <div id="alert" class="msg" style="display:none" role="alert" aria-live="assertive"></div>
  </div>
</div>

<script>
/* ===== CONFIG ===== */
const SHEETDB_BASE = "https://sheetdb.io/api/v1/8pmdh33s9fvy8";
const SHEETS = { PATIENTS:"Patients", TOKENS:"LinkTokens", SCORES:"Score_QFC" }; // <-- ajuste o nome da aba se precisar
const CODE = "QFC"; // código salvo na planilha
const PORTAL_URL = "https://integradaneuropsicologia.github.io/formularios/";
const RELEASE_KEYS = ["QFC"]; // ajuste para o nome da coluna de liberação no Patients

/* ===== HELPERS ===== */
const $ = s => document.querySelector(s);
const onlyDigits = s => (s||"").replace(/\D+/g,"");
const qs = k => new URLSearchParams(location.search).get(k) || "";
function setBox(id, text, kind="ok"){ const el=$(id); if(!el) return; el.textContent = text; el.className = "msg " + (kind==="ok"?"okbox":kind==="warn"?"warnbox":"errbox"); el.style.display = "block"; }
function hideBox(id){ const el=$(id); if(el){ el.style.display="none"; el.textContent=""; } }
function maskCPF(cpf){ const d = onlyDigits(cpf||""); if(d.length!==11) return cpf||""; return `${d.slice(0,3)}.${d.slice(3,6)}.${d.slice(6,9)}-${d.slice(9)}`; }
function fmtDateISO(iso){ if(!iso) return ""; const [y,m,d] = String(iso||"").split("-"); if(!y||!m||!d) return iso; return `${d}/${m}/${y}`; }
async function GET(url){ const r=await fetch(url); if(!r.ok) throw new Error("HTTP "+r.status); return r.json(); }
async function sheetSearch(sheet, params){ const usp = new URLSearchParams(params); return GET(`${SHEETDB_BASE}/search?sheet=${encodeURIComponent(sheet)}&${usp.toString()}`); }
async function sheetCreate(sheet, row){ const r = await fetch(`${SHEETDB_BASE}?sheet=${encodeURIComponent(sheet)}`, { method:"POST", headers:{ "Content-Type":"application/json" }, body: JSON.stringify({ data:[row] }) }); if(!r.ok) throw new Error(await r.text()); return r.json(); }
async function sheetPatchBy(sheet, column, value, data){ const r = await fetch(`${SHEETDB_BASE}/${encodeURIComponent(column)}/${encodeURIComponent(value)}?sheet=${encodeURIComponent(sheet)}`, { method:"PATCH", headers:{ "Content-Type":"application/json" }, body: JSON.stringify({ data }) }); if(!r.ok) throw new Error(await r.text()); return r.json(); }
function goPortalWithToken(){
  const TOKEN = qs("token");
  try{
    const u = new URL(PORTAL_URL, location.href);
    u.searchParams.set("token", TOKEN);
    location.href = u.toString();
  }catch(_){
    const sep = PORTAL_URL.includes("?") ? "&" : "?";
    location.href = PORTAL_URL + sep + "token=" + encodeURIComponent(TOKEN);
  }
}

/* ===== ITENS (25) ===== */
const ITEMS = [
  "Você lê alguma coisa, percebe que não estava prestando atenção e precisa lê-la novamente?",
  "Você se esquece por que foi de um cômodo a outro dentro de casa?",
  "Você deixa de notar placas de sinalização ao dirigir?",
  "Você confunde esquerda e direita ao indicar o caminho a alguém?",
  "Você esbarra (“tromba”) em outras pessoas?",
  "Você esquece se apagou a luz, a chama do fogão ou se trancou a porta?",
  "Você não se atenta ao nome da pessoa quando ela está sendo apresentada a você?",
  "Você diz alguma coisa e depois percebe que isso pode ter sido interpretado como um insulto?",
  "Você tem dificuldade em escutar as pessoas falando com você quando está fazendo outra coisa?",
  "Você perde a calma e se arrepende?",
  "Você deixa cartas, mensagens ou e-mails importantes sem resposta por dias?",
  "Você esquece onde virar em um caminho que conhece bem, mas usa pouco?",
  "Você tem dificuldades em achar o que quer no supermercado, embora o produto esteja por lá?",
  "Você se encontra subitamente pensando se usou uma palavra na forma correta?",
  "Você tem problemas em se decidir?",
  "Você esquece os seus compromissos?",
  "Você esquece onde colocou alguma coisa, como o jornal, o celular ou as suas chaves?",
  "Você esquece se pegou algum objeto que precisava levar consigo?",
  "Você “viaja” ou fica “no mundo da lua” quando deveria estar ouvindo alguma coisa?",
  "Você esquece o nome das pessoas?",
  "Você começa a fazer alguma coisa em casa e se distrai fazendo algo diferente (sem querer)?",
  "Você não consegue se lembrar de alguma coisa, mesmo que esteja “na ponta da língua”?",
  "Você se esquece do que saiu para comprar?",
  "Você deixa as coisas caírem (as derruba)?",
  "Você não consegue pensar em nada para dizer?"
];

/* ===== RENDER ===== */
function renderQuestions(){
  const host = $("#qs"); host.innerHTML = "";
  ITEMS.forEach((text, idx)=>{
    const q = idx+1, qn = String(q).padStart(2,"0");
    const row = document.createElement('div');
    row.className = 'item';
    row.setAttribute('data-q', String(q));

    const stem = document.createElement('div');
    stem.className = 'stem';
    stem.id = `s${qn}`;
    stem.textContent = `${q}. ${text}`;

    const scale = document.createElement('div');
    scale.className = 'scale';

    // 0..4 em botões/“chips”
    const OPTIONS = [
      {v:0, label:"Nunca"},
      {v:1, label:"Raramente"},
      {v:2, label:"Ocasionalmente"},
      {v:3, label:"Frequentemente"},
      {v:4, label:"Quase sempre"},
    ];
    OPTIONS.forEach(opt=>{
      const lab = document.createElement('label'); lab.className = 'chip';
      lab.setAttribute('title', `${opt.label} (${opt.v})`);
      lab.innerHTML = `
        <input type="radio" name="q${qn}" value="${opt.v}" required aria-labelledby="s${qn}">
        <span class="lbl">${opt.label}</span>
        <span class="val">(${opt.v})</span>`;
      scale.appendChild(lab);
    });

    row.append(stem, scale);
    host.appendChild(row);
  });
}

/* ===== ESTADO ===== */
let patient=null, tokenRow=null, CPF="";
const TOKEN = qs("token");
const STORAGE_KEY = `QFC_${TOKEN||'anon'}`;

/* ===== BOOT ===== */
(async function boot(){
  try{
    if(!TOKEN){ setBox("#alert","Link inválido (sem token). Solicite um novo link.","err"); return; }

    const trows = await sheetSearch(SHEETS.TOKENS, { token: TOKEN });
    if(!trows || !trows.length) throw new Error("Token inválido ou expirado.");
    tokenRow = trows[0];
    if(String(tokenRow.disabled||"não").toLowerCase()==="sim") throw new Error("Token desativado. Peça um novo link.");
    if(tokenRow.expires_at && new Date(tokenRow.expires_at) < new Date()) throw new Error("Token expirado. Peça um novo link.");
    CPF = onlyDigits(tokenRow.cpf||"");
    if(!CPF) throw new Error("Token sem CPF vinculado.");

    const prows = await sheetSearch(SHEETS.PATIENTS, { cpf: CPF });
    if(!prows || !prows.length) throw new Error("Paciente não encontrado.");
    patient = prows[0];

    const isAllowed = RELEASE_KEYS.some(k => String(patient[k]||"").trim().toLowerCase()==="sim");
    if(!isAllowed){ setBox("#alert","Este formulário não está liberado para você.","err"); return; }

    // Checa se já respondeu
    const doneKeys = RELEASE_KEYS.map(k => `${k}_FEITO`);
    const anyDoneFlag = doneKeys.some(k => String(patient[k]||"").trim().toLowerCase()==="sim");
    const already = await sheetSearch(SHEETS.SCORES, { cpf: CPF, code: CODE });
    if(anyDoneFlag || (already && already.length)){
      setBox("#alert","Você já respondeu este formulário. Voltando ao portal…","ok");
      setTimeout(goPortalWithToken, 1200); return;
    }

    // Render
    renderPatientInfo();
    renderQuestions();
    restoreDraft();
    updateProgress();

    $("#pacInfo").style.display = "grid";
    $("#form").style.display = "block";
    $("#progressWrap").style.display = "block";
    hideBox("#alert");

  }catch(err){
    console.error(err);
    setBox("#alert", err.message || "Falha ao abrir o formulário. Tente novamente mais tarde.", "err");
  }
})();

function renderPatientInfo(){
  const g = $("#pacInfo"); g.innerHTML="";
  const info = [
    ["Nome", patient.nome || "-"],
    ["CPF", maskCPF(patient.cpf)],
    ["Nascimento", fmtDateISO(patient.data_nascimento)],
    ["E-mail", patient.email || "-"],
    ["WhatsApp", patient.whatsapp || "-"]
  ];
  for(const [k,v] of info){
    const div = document.createElement("div");
    div.className = "info";
    div.innerHTML = `<b>${k}</b><div>${v||"-"}</div>`;
    g.appendChild(div);
  }
}

/* ===== RASCUNHO LOCAL ===== */
function saveDraft(){
  const data = {};
  for(let i=1;i<=ITEMS.length;i++){
    const qn = String(i).padStart(2,"0");
    const sel = document.querySelector(`input[name="q${qn}"]:checked`);
    if(sel) data[`q${qn}`] = Number(sel.value);
  }
  try{ localStorage.setItem(STORAGE_KEY, JSON.stringify(data)); }catch(e){ console.warn("Sem espaço para salvar rascunho"); }
}
function restoreDraft(){
  try{
    const raw = localStorage.getItem(STORAGE_KEY);
    if(!raw) return;
    const data = JSON.parse(raw);
    for(const [k,v] of Object.entries(data||{})){
      const el = document.querySelector(`input[name="${k}"][value="${v}"]`);
      if(el){ el.checked = true; }
    }
  }catch(e){ /* ignore */ }
}
function clearDraft(){ localStorage.removeItem(STORAGE_KEY); }

function countAnswered(){ let c=0; for(let i=1;i<=ITEMS.length;i++){ const qn=String(i).padStart(2,'0'); if(document.querySelector(`input[name="q${qn}"]:checked`)) c++; } return c; }
function updateProgress(){ const answered = countAnswered(); const total = ITEMS.length; $("#progressText").textContent = `Progresso: ${answered}/${total}`; $("#bar").style.width = `${(answered/total)*100}%`; }

/* ===== EVENTOS DE UI ===== */
addEventListener('change', (e)=>{ if(e.target && e.target.matches('input[type="radio"][name^="q"]')){ saveDraft(); updateProgress(); } });
$("#btnSave").addEventListener('click', ()=>{ saveDraft(); setBox('#msg','Rascunho salvo neste dispositivo.','ok'); });
$("#clearDraft").addEventListener('click', ()=>{ clearDraft(); setBox('#msg','Rascunho apagado.','warn'); });

/* ===== SUBMIT ===== */
let sending=false;
$("#form").addEventListener("submit", async (e)=>{
  e.preventDefault(); if(sending) return; sending = true; hideBox("#msg");
  const btn = $("#btnSubmit"); const originalText = btn.textContent; btn.disabled = true; btn.textContent = "Enviando…";
  try{
    if(!patient) throw new Error("Sessão inválida. Recarregue o link.");

    // Validação: todas respondidas
    for(let i=1;i<=ITEMS.length;i++){
      const qn = String(i).padStart(2,'0');
      const sel = document.querySelector(`input[name="q${qn}"]:checked`);
      if(!sel){
        const row = document.querySelector(`.item[data-q="${i}"]`);
        if(row) row.scrollIntoView({behavior:'smooth', block:'center'});
        throw new Error(`Responda a questão ${i}.`);
      }
    }

    // Soma TOTAL (0..100)
    let total = 0;
    for(let i=1;i<=ITEMS.length;i++){
      const qn = String(i).padStart(2,'0');
      total += Number(document.querySelector(`input[name="q${qn}"]:checked`).value);
    }

    await sheetCreate(SHEETS.SCORES, {
      result_id: `${patient.cpf}_${CODE}_${Date.now()}`,
      token: TOKEN,
      cpf: patient.cpf,
      code: CODE,
      source: "paciente",
      submitted_at: new Date().toISOString(),
      total: total,
      categoria: "",   // sem subescalas neste instrumento
      metrics: ""
    });

    // Marca como feito no Patients
    const doneUpdates = {};
    RELEASE_KEYS.map(k=>`${k}_FEITO`).forEach(k=>{ if(k in patient) doneUpdates[k] = "sim"; });
    if(Object.keys(doneUpdates).length===0) doneUpdates[`${RELEASE_KEYS[0]}_FEITO`] = "sim";
    await sheetPatchBy(SHEETS.PATIENTS, "cpf", patient.cpf, doneUpdates);

    clearDraft();
    setBox("#msg","Formulário enviado. Voltando ao portal…","ok");
    setTimeout(goPortalWithToken, 1100);

  }catch(err){
    console.error(err);
    setBox("#msg", err.message || "Falha ao enviar. Tente novamente.", "err");
    sending = false; btn.disabled = false; btn.textContent = originalText;
  }
});
</script>
</body>
</html>

